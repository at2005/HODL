
# name: HODL-build

# on: [push]

# env:
#   GITHUB_ACTIONS: true

# jobs:
# #linux build
#    build-and-test-linux:
#       runs-on: ubuntu-latest
#       steps:
#          - uses: actions/checkout@v3
#          - run: mkdir bin
#          - run: make
#          - run: bin/hodl --target qasm -o out.qasm data/grover.hodl
#    build-and-test-macos:
#       runs-on: macos-latest
#       steps:
#          - uses: actions/checkout@v3
#          - run: mkdir bin
#          - run: make
#          - run: bin/hodl --target qasm -o out.qasm data/grover.hodl

name: HODL Compile, Run and Publish Binaries as Artifacts for Release
on:
  push:
    branches:
      - master

env:
  GITHUB_ACTIONS: true

jobs:
  # build-windows:
  #   runs-on: windows-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   # - name: Setup GCC
  #   #   uses: actions/setup-mingw@v1
  #   #   with:
  #   #     version: '9.3.0'
  #   - name: Install MinGW
  #     uses: egor-tensin/setup-mingw@v2.2.0


  #   - name: Create bin directory
  #     run: |
  #       mkdir bin

  #   - name: Compile C++ file
  #     run: |
  #       g++ -std=c++11 src/compiler/source.cpp src/circuit/circuit.cpp -o bin/hodl.exe

  #   - name: Run compiled binary
  #     run: |
  #       ./bin/hodl.exe --target qasm -o out.qasm data/grover.hodl

  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: hodl-windows
  #       path: bin/hodl.exe
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create bin directory
      run: |
        mkdir bin

    - name: Compile C++ file
      run: |
        g++ -std=c++11 src/compiler/source.cpp src/circuit/circuit.cpp -o bin/hodl

    - name: Run compiled binary
      run: |
        ./bin/hodl --target qasm -o out.qasm data/grover.hodl

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: hodl-linux
        path: bin/hodl

  build-macos:

    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create bin directory
      run: |
        mkdir bin

    - name: Compile C++ file
      run: |
        g++ -std=c++11 src/compiler/source.cpp src/circuit/circuit.cpp -o bin/hodl

    - name: Run compiled binary
      run: |
        ./bin/hodl --target qasm -o out.qasm data/grover.hodl

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: hodl-macos
        path: bin/hodl

   # create-release:
   create-release:
      #needs: [build-windows, build-linux, build-macos]
      needs: [build-linux, build-macos]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          with:
            tag_name: ${{ github.ref }}
            release_name: Release ${{ github.ref }}
            draft: false
            prerelease: false
        # - name: Upload Windows Artifact
        #   uses: actions/upload-release-asset@v1
        #   env:
        #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   with:
        #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        #     asset_path: ./bin/hodl.exe
        #     asset_name: hodl.exe
        #     asset_content_type: application/octet-stream
        - name: Upload Linux Artifact
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
            asset_path: ./bin/hodl
            asset_name: hodl
            asset_content_type: application/octet-stream
        - name: Upload MacOS Artifact
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new
            asset_path: ./bin/hodl
            asset_name: hodl
            asset_content_type: application/octet-stream
